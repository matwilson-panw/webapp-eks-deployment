name: Infrastructure Deployment

on:
  push:
    branches:
      - main  # Trigger on main branch commits
  workflow_dispatch:  # Allows manual trigger

permissions:
  id-token: write  # For OIDC authentication
  contents: read

jobs:
  terraform:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: us-east-1
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GithubActionsRole

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: latest

    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init

    - name: Terraform Format Check
      run: |
        cd infrastructure
        terraform fmt -check

    - name: Check for Existing Terraform Lock
      id: check_lock
      run: |
        LOCK_ID=$(aws dynamodb scan --table-name terraform-locks --query "Items[0].LockID.S" --output text)
        if [ "$LOCK_ID" != "null" ]; then
          echo "Terraform state is locked by $LOCK_ID"
          exit 1
        fi

    - name: Force Unlock Terraform State
      run: terraform force-unlock -force $(aws dynamodb scan --table-name terraform-locks --query "Items[0].LockID.S" --output text)
      if: failure() # Runs only if the previous step fails

    - name: Terraform Plan
      run: |
        cd infrastructure
        terraform plan -out=tfplan -lock-timeout=60s -input=false -no-color
      env:
        TF_LOG: DEBUG

    - name: Terraform Apply (Manual Approval Required)
      run: |
        cd infrastructure
        terraform apply -auto-approve tfplan
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
